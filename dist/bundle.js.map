{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://da-da-a-game/./src/index.ts","webpack://da-da-a-game/./src/utils/cardUtils.ts","webpack://da-da-a-game/./src/types/card.ts","webpack://da-da-a-game/./src/types/player.ts","webpack://da-da-a-game/./src/ai/aiPlayer.ts","webpack://da-da-a-game/./src/logic/gameLogic.ts","webpack://da-da-a-game/./src/engine/gameEngine.ts","webpack://da-da-a-game/./src/logic/cardPattern.ts","webpack://da-da-a-game/./src/ui/gameUI.ts","webpack://da-da-a-game/webpack/bootstrap","webpack://da-da-a-game/webpack/before-startup","webpack://da-da-a-game/webpack/startup","webpack://da-da-a-game/webpack/after-startup"],"sourcesContent":["import { GameUI } from './ui/gameUI';\n\n// 等待DOM加载完成\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('打大A游戏正在加载...');\n  \n  // 创建游戏UI实例\n  const gameUI = new GameUI();\n  \n  // 将gameUI实例挂载到window对象上，方便调试\n  (window as any).gameUI = gameUI;\n  \n  console.log('打大A游戏已加载完成！');\n});\n\n// 导出主要类型和函数，方便其他地方使用\nexport * from './types/card';\nexport * from './types/player';\nexport * from './logic/gameLogic';\nexport * from './logic/cardPattern';\nexport * from './engine/gameEngine';\nexport * from './ui/gameUI';\nexport * from './utils/cardUtils';\nexport * from './ai/aiPlayer'; ","import { Card, Suit, Rank, SuitDisplay, RankDisplay } from '../types/card';\n\n// 创建单张牌\nexport function createCard(suit: Suit | null, rank: Rank): Card {\n  let display: string;\n  \n  if (rank === Rank.LITTLE_JOKER || rank === Rank.BIG_JOKER) {\n    // 大小王没有花色\n    display = RankDisplay[rank];\n  } else {\n    // 普通牌显示花色和数字\n    display = `${SuitDisplay[suit!]}${RankDisplay[rank]}`;\n  }\n  \n  return {\n    suit,\n    rank,\n    display\n  };\n}\n\n// 生成完整的54张牌堆\nexport function createFullDeck(): Card[] {\n  const deck: Card[] = [];\n  \n  // 生成52张普通牌\n  for (const suit of Object.values(Suit)) {\n    for (let rank = Rank.THREE; rank <= Rank.ACE; rank++) {\n      deck.push(createCard(suit, rank));\n    }\n  }\n  \n  // 添加大小王\n  deck.push(createCard(null, Rank.LITTLE_JOKER));\n  deck.push(createCard(null, Rank.BIG_JOKER));\n  \n  return deck;\n}\n\n// 洗牌算法（Fisher-Yates shuffle）\nexport function shuffleDeck(deck: Card[]): Card[] {\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// 比较两张牌的大小\nexport function compareCards(card1: Card, card2: Card): number {\n  return card1.rank - card2.rank;\n}\n\n// 按牌面值排序\nexport function sortCards(cards: Card[]): Card[] {\n  return [...cards].sort(compareCards);\n}\n\n// 将牌转换为字符串（用于显示）\nexport function cardToString(card: Card): string {\n  return card.display;\n}\n\n// 将牌数组转换为字符串\nexport function cardsToString(cards: Card[]): string {\n  return cards.map(cardToString).join(' ');\n} ","// 花色枚举\nexport enum Suit {\n  SPADES = 'spades',    // 黑桃\n  HEARTS = 'hearts',    // 红心\n  DIAMONDS = 'diamonds', // 方片\n  CLUBS = 'clubs'       // 梅花\n}\n\n// 牌面值枚举\nexport enum Rank {\n  THREE = 3,\n  FOUR = 4,\n  FIVE = 5,\n  SIX = 6,\n  SEVEN = 7,\n  EIGHT = 8,\n  NINE = 9,\n  TEN = 10,\n  JACK = 11,\n  QUEEN = 12,\n  KING = 13,\n  ACE = 14,       // A在打大A中通常是最大的\n  LITTLE_JOKER = 15,  // 小王\n  BIG_JOKER = 16      // 大王\n}\n\n// 牌的接口定义\nexport interface Card {\n  suit: Suit | null;  // 大小王没有花色\n  rank: Rank;\n  display: string;    // 用于显示的字符串\n}\n\n// 牌型枚举\nexport enum CardType {\n  SINGLE = 'single',           // 单张\n  PAIR = 'pair',               // 对子\n  TRIPLE = 'triple',           // 三张\n  TRIPLE_WITH_SINGLE = 'triple_with_single',  // 三带一\n  TRIPLE_WITH_PAIR = 'triple_with_pair',      // 三带对\n  STRAIGHT = 'straight',       // 顺子\n  DOUBLE_STRAIGHT = 'double_straight',        // 双顺\n  TRIPLE_STRAIGHT = 'triple_straight',        // 三顺\n  FOUR_WITH_TWO = 'four_with_two',           // 四带二\n  BOMB = 'bomb',               // 炸弹\n  JOKER_BOMB = 'joker_bomb',   // 王炸\n  INVALID = 'invalid'          // 无效牌型\n}\n\n// 牌型数据结构\nexport interface CardPattern {\n  type: CardType;\n  cards: Card[];\n  mainRank: Rank;     // 主要牌面值（如三带一中的三）\n  power: number;      // 牌力大小，用于比较\n}\n\n// 花色显示映射\nexport const SuitDisplay: Record<Suit, string> = {\n  [Suit.SPADES]: '♠',\n  [Suit.HEARTS]: '♥',\n  [Suit.DIAMONDS]: '♦',\n  [Suit.CLUBS]: '♣'\n};\n\n// 牌面值显示映射\nexport const RankDisplay: Record<Rank, string> = {\n  [Rank.THREE]: '3',\n  [Rank.FOUR]: '4',\n  [Rank.FIVE]: '5',\n  [Rank.SIX]: '6',\n  [Rank.SEVEN]: '7',\n  [Rank.EIGHT]: '8',\n  [Rank.NINE]: '9',\n  [Rank.TEN]: '10',\n  [Rank.JACK]: 'J',\n  [Rank.QUEEN]: 'Q',\n  [Rank.KING]: 'K',\n  [Rank.ACE]: 'A',\n  [Rank.LITTLE_JOKER]: '小王',\n  [Rank.BIG_JOKER]: '大王'\n}; ","import { Card } from './card';\n\n// 玩家状态枚举\nexport enum PlayerStatus {\n  WAITING = 'waiting',          // 等待中\n  PLAYING = 'playing',          // 游戏中\n  FINISHED = 'finished',        // 已出完牌\n  DISCONNECTED = 'disconnected' // 断线\n}\n\n// 玩家类型枚举\nexport enum PlayerType {\n  HUMAN = 'human',      // 人类玩家\n  AI = 'ai'             // AI玩家\n}\n\n// 玩家接口\nexport interface Player {\n  id: string;\n  name: string;\n  type: PlayerType;\n  status: PlayerStatus;\n  cards: Card[];              // 手牌\n  position: number;           // 座位号（0-3）\n  score: number;              // 得分\n  isLandlord: boolean;        // 是否是地主\n  totalGames: number;         // 总局数\n  wins: number;               // 胜利次数\n}\n\n// 玩家操作枚举\nexport enum PlayerAction {\n  PASS = 'pass',              // 不出\n  PLAY_CARDS = 'play_cards',  // 出牌\n  CALL_LANDLORD = 'call_landlord',  // 叫地主\n  GRAB_LANDLORD = 'grab_landlord'   // 抢地主\n}\n\n// 玩家操作数据\nexport interface PlayerMove {\n  playerId: string;\n  action: PlayerAction;\n  cards?: Card[];             // 出的牌（如果是出牌操作）\n  timestamp: number;          // 操作时间戳\n}\n\n// 创建新玩家的函数\nexport function createPlayer(\n  id: string,\n  name: string,\n  type: PlayerType,\n  position: number\n): Player {\n  return {\n    id,\n    name,\n    type,\n    status: PlayerStatus.WAITING,\n    cards: [],\n    position,\n    score: 0,\n    isLandlord: false,\n    totalGames: 0,\n    wins: 0\n  };\n}\n\n// 玩家统计信息\nexport interface PlayerStats {\n  playerId: string;\n  playerName: string;\n  totalGames: number;\n  wins: number;\n  losses: number;\n  winRate: number;\n  totalScore: number;\n  averageScore: number;\n}\n\n// 计算玩家胜率\nexport function calculateWinRate(wins: number, totalGames: number): number {\n  if (totalGames === 0) return 0;\n  return Math.round((wins / totalGames) * 100 * 100) / 100; // 保留两位小数\n} ","import { Card, CardType, Rank } from '../types/card';\nimport { Player } from '../types/player';\nimport { GameData, GameState } from '../logic/gameLogic';\nimport { identifyCardPattern, compareCardPatterns } from '../logic/cardPattern';\nimport { sortCards } from '../utils/cardUtils';\n\n// AI难度等级\nexport enum AIDifficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard'\n}\n\n// AI决策结果\nexport interface AIDecision {\n  action: 'call_landlord' | 'pass_landlord' | 'play_cards' | 'pass';\n  cards?: Card[];\n  confidence: number; // 决策置信度 0-1\n}\n\nexport class AIPlayer {\n  private difficulty: AIDifficulty;\n  private playerId: string;\n\n  constructor(playerId: string, difficulty: AIDifficulty = AIDifficulty.MEDIUM) {\n    this.playerId = playerId;\n    this.difficulty = difficulty;\n  }\n\n  // 决定是否叫地主\n  public decideLandlord(gameData: GameData): AIDecision {\n    const player = gameData.players.find(p => p.id === this.playerId);\n    if (!player) {\n      return { action: 'pass_landlord', confidence: 0 };\n    }\n\n    const handStrength = this.evaluateHandStrength(player.cards);\n    const shouldCall = this.shouldCallLandlord(handStrength, gameData);\n\n    return {\n      action: shouldCall ? 'call_landlord' : 'pass_landlord',\n      confidence: handStrength / 100\n    };\n  }\n\n  // 决定出牌\n  public decidePlayCards(gameData: GameData): AIDecision {\n    const player = gameData.players.find(p => p.id === this.playerId);\n    if (!player) {\n      return { action: 'pass', confidence: 0 };\n    }\n\n    // 如果没有上一手牌，AI可以自由出牌\n    if (!gameData.lastPlayedPattern) {\n      const bestPlay = this.findBestFirstPlay(player.cards);\n      return {\n        action: 'play_cards',\n        cards: bestPlay,\n        confidence: 0.8\n      };\n    }\n\n    // 尝试找到能够压制上一手牌的牌型\n    const counterPlay = this.findCounterPlay(player.cards, gameData.lastPlayedPattern);\n    \n    if (counterPlay.length > 0) {\n      return {\n        action: 'play_cards',\n        cards: counterPlay,\n        confidence: 0.7\n      };\n    }\n\n    // 无法出牌，选择过牌\n    return { action: 'pass', confidence: 0.9 };\n  }\n\n  // 评估手牌强度 (0-100)\n  private evaluateHandStrength(cards: Card[]): number {\n    let strength = 0;\n    const sortedCards = sortCards(cards);\n\n    // 统计各种牌型的数量\n    const rankCounts = this.countRanks(sortedCards);\n    \n    // 大小王加分\n    if (rankCounts.get(Rank.BIG_JOKER)) strength += 15;\n    if (rankCounts.get(Rank.LITTLE_JOKER)) strength += 10;\n\n    // 炸弹加分\n    for (const [rank, count] of rankCounts) {\n      if (count === 4) strength += 20; // 炸弹\n      if (count === 3) strength += 8;  // 三张\n      if (count === 2) strength += 3;  // 对子\n    }\n\n    // A和K加分\n    if (rankCounts.get(Rank.ACE)) strength += rankCounts.get(Rank.ACE)! * 5;\n    if (rankCounts.get(Rank.KING)) strength += rankCounts.get(Rank.KING)! * 4;\n\n    // 手牌数量少加分（接近胜利）\n    if (cards.length <= 5) strength += (6 - cards.length) * 10;\n\n    return Math.min(strength, 100);\n  }\n\n  // 决定是否叫地主\n  private shouldCallLandlord(handStrength: number, gameData: GameData): boolean {\n    switch (this.difficulty) {\n      case AIDifficulty.EASY:\n        return handStrength > 60 + Math.random() * 20;\n      case AIDifficulty.MEDIUM:\n        return handStrength > 45 + Math.random() * 15;\n      case AIDifficulty.HARD:\n        // 考虑更多因素：位置、已经过的玩家数量等\n        const position = gameData.currentPlayer;\n        const baseThreshold = 40;\n        const positionBonus = position === 0 ? 5 : 0; // 第一个叫地主稍微保守\n        return handStrength > baseThreshold + positionBonus + Math.random() * 10;\n      default:\n        return handStrength > 50;\n    }\n  }\n\n  // 找到最佳的首次出牌\n  private findBestFirstPlay(cards: Card[]): Card[] {\n    const sortedCards = sortCards(cards);\n    \n    // 优先策略：\n    // 1. 出单张最小的牌\n    // 2. 出对子\n    // 3. 出三张\n    // 4. 出顺子\n\n    // 尝试出最小的单张\n    const smallestCard = sortedCards[0];\n    const smallestPattern = identifyCardPattern([smallestCard]);\n    \n    if (smallestPattern.type !== CardType.INVALID) {\n      return [smallestCard];\n    }\n\n    // 尝试出对子\n    const rankCounts = this.countRanks(sortedCards);\n    for (const [rank, count] of rankCounts) {\n      if (count >= 2) {\n        const pairCards = sortedCards.filter(c => c.rank === rank).slice(0, 2);\n        return pairCards;\n      }\n    }\n\n    // 如果没有更好的选择，出最小的单张\n    return [smallestCard];\n  }\n\n  // 找到能够压制上一手牌的牌型\n  private findCounterPlay(cards: Card[], lastPattern: any): Card[] {\n    const sortedCards = sortCards(cards);\n    \n    // 首先尝试相同类型的更大牌型\n    const sameTypePlay = this.findSameTypePlay(sortedCards, lastPattern);\n    if (sameTypePlay.length > 0) {\n      return sameTypePlay;\n    }\n\n    // 尝试用炸弹压制\n    const bombPlay = this.findBombPlay(sortedCards);\n    if (bombPlay.length > 0) {\n      return bombPlay;\n    }\n\n    // 无法压制\n    return [];\n  }\n\n  // 找到相同类型但更大的牌型\n  private findSameTypePlay(cards: Card[], lastPattern: any): Card[] {\n    const targetType = lastPattern.type;\n    const targetPower = lastPattern.power;\n    const targetLength = lastPattern.cards.length;\n\n    switch (targetType) {\n      case CardType.SINGLE:\n        return this.findBiggerSingle(cards, targetPower);\n      \n      case CardType.PAIR:\n        return this.findBiggerPair(cards, targetPower);\n      \n      case CardType.TRIPLE:\n        return this.findBiggerTriple(cards, targetPower);\n      \n      case CardType.BOMB:\n        return this.findBiggerBomb(cards, targetPower);\n      \n      default:\n        return [];\n    }\n  }\n\n  // 找到更大的单张\n  private findBiggerSingle(cards: Card[], targetPower: number): Card[] {\n    const singleCards = cards.filter(card => {\n      const pattern = identifyCardPattern([card]);\n      return pattern.type === CardType.SINGLE && pattern.power > targetPower;\n    });\n    \n    if (singleCards.length > 0) {\n      // 返回最小的能压制的单张\n      const smallest = singleCards.reduce((min, card) => \n        card.rank < min.rank ? card : min\n      );\n      return [smallest];\n    }\n    \n    return [];\n  }\n\n  // 找到更大的对子\n  private findBiggerPair(cards: Card[], targetPower: number): Card[] {\n    const rankCounts = this.countRanks(cards);\n    \n    for (const [rank, count] of rankCounts) {\n      if (count >= 2 && rank > targetPower) {\n        const pairCards = cards.filter(c => c.rank === rank).slice(0, 2);\n        const pattern = identifyCardPattern(pairCards);\n        if (pattern.type === CardType.PAIR) {\n          return pairCards;\n        }\n      }\n    }\n    \n    return [];\n  }\n\n  // 找到更大的三张\n  private findBiggerTriple(cards: Card[], targetPower: number): Card[] {\n    const rankCounts = this.countRanks(cards);\n    \n    for (const [rank, count] of rankCounts) {\n      if (count >= 3 && rank > targetPower) {\n        const tripleCards = cards.filter(c => c.rank === rank).slice(0, 3);\n        const pattern = identifyCardPattern(tripleCards);\n        if (pattern.type === CardType.TRIPLE) {\n          return tripleCards;\n        }\n      }\n    }\n    \n    return [];\n  }\n\n  // 找到更大的炸弹\n  private findBiggerBomb(cards: Card[], targetPower: number): Card[] {\n    // 王炸\n    const hasLittleJoker = cards.some(c => c.rank === Rank.LITTLE_JOKER);\n    const hasBigJoker = cards.some(c => c.rank === Rank.BIG_JOKER);\n    \n    if (hasLittleJoker && hasBigJoker) {\n      const jokers = cards.filter(c => \n        c.rank === Rank.LITTLE_JOKER || c.rank === Rank.BIG_JOKER\n      );\n      const pattern = identifyCardPattern(jokers);\n      if (pattern.type === CardType.JOKER_BOMB && pattern.power > targetPower) {\n        return jokers;\n      }\n    }\n\n    // 普通炸弹\n    const rankCounts = this.countRanks(cards);\n    for (const [rank, count] of rankCounts) {\n      if (count === 4 && rank + 1000 > targetPower) {\n        const bombCards = cards.filter(c => c.rank === rank);\n        return bombCards;\n      }\n    }\n    \n    return [];\n  }\n\n  // 找到炸弹（用于压制其他牌型）\n  private findBombPlay(cards: Card[]): Card[] {\n    // 王炸\n    const hasLittleJoker = cards.some(c => c.rank === Rank.LITTLE_JOKER);\n    const hasBigJoker = cards.some(c => c.rank === Rank.BIG_JOKER);\n    \n    if (hasLittleJoker && hasBigJoker) {\n      const jokers = cards.filter(c => \n        c.rank === Rank.LITTLE_JOKER || c.rank === Rank.BIG_JOKER\n      );\n      return jokers;\n    }\n\n    // 普通炸弹 - 根据难度决定是否使用\n    const rankCounts = this.countRanks(cards);\n    for (const [rank, count] of rankCounts) {\n      if (count === 4) {\n        // 简单AI更倾向于保留炸弹\n        if (this.difficulty === AIDifficulty.EASY && Math.random() < 0.7) {\n          continue;\n        }\n        \n        const bombCards = cards.filter(c => c.rank === rank);\n        return bombCards;\n      }\n    }\n    \n    return [];\n  }\n\n  // 统计牌面值出现次数\n  private countRanks(cards: Card[]): Map<Rank, number> {\n    const counts = new Map<Rank, number>();\n    cards.forEach(card => {\n      counts.set(card.rank, (counts.get(card.rank) || 0) + 1);\n    });\n    return counts;\n  }\n\n  // 添加思考延迟（让AI看起来更真实）\n  public getThinkingDelay(): number {\n    const baseDelay = 800; // 基础延迟800ms\n    const randomDelay = Math.random() * 1200; // 随机0-1200ms\n    \n    switch (this.difficulty) {\n      case AIDifficulty.EASY:\n        return baseDelay + randomDelay * 0.5; // 较快\n      case AIDifficulty.MEDIUM:\n        return baseDelay + randomDelay; // 中等\n      case AIDifficulty.HARD:\n        return baseDelay + randomDelay * 1.5; // 较慢，表示在思考\n      default:\n        return baseDelay + randomDelay;\n    }\n  }\n} ","import { Card, CardPattern } from '../types/card';\nimport { Player, PlayerAction, PlayerMove, PlayerStatus } from '../types/player';\nimport { createFullDeck, shuffleDeck, sortCards } from '../utils/cardUtils';\nimport { identifyCardPattern, canPlayCards } from './cardPattern';\n\n// 游戏状态枚举\nexport enum GameState {\n  WAITING = 'waiting',          // 等待玩家\n  BIDDING = 'bidding',          // 叫地主阶段\n  PLAYING = 'playing',          // 游戏进行中\n  FINISHED = 'finished',        // 游戏结束\n  PAUSED = 'paused'            // 游戏暂停\n}\n\n// 游戏阶段枚举\nexport enum GamePhase {\n  DEAL_CARDS = 'deal_cards',    // 发牌\n  CALL_LANDLORD = 'call_landlord',  // 叫地主\n  PLAY_CARDS = 'play_cards',    // 出牌\n  GAME_OVER = 'game_over'       // 游戏结束\n}\n\n// 游戏数据结构\nexport interface GameData {\n  id: string;\n  players: Player[];\n  deck: Card[];\n  landlordCards: Card[];        // 地主牌（底牌）\n  currentPlayer: number;        // 当前玩家索引\n  landlordIndex: number;        // 地主索引\n  state: GameState;\n  phase: GamePhase;\n  lastPlayedPattern: CardPattern | null;  // 上一手出的牌\n  lastPlayerId: string | null;   // 上一个出牌的玩家ID\n  moves: PlayerMove[];           // 游戏记录\n  round: number;                 // 当前回合\n  passCount: number;             // 连续过牌次数\n  startTime: number;             // 游戏开始时间\n}\n\n// 创建新游戏\nexport function createGame(gameId: string, players: Player[]): GameData {\n  if (players.length !== 3) {\n    throw new Error('打大A需要3个玩家');\n  }\n  \n  return {\n    id: gameId,\n    players: players.map(p => ({ ...p, status: PlayerStatus.WAITING })),\n    deck: [],\n    landlordCards: [],\n    currentPlayer: 0,\n    landlordIndex: -1,\n    state: GameState.WAITING,\n    phase: GamePhase.DEAL_CARDS,\n    lastPlayedPattern: null,\n    lastPlayerId: null,\n    moves: [],\n    round: 0,\n    passCount: 0,\n    startTime: Date.now()\n  };\n}\n\n// 发牌\nexport function dealCards(game: GameData): void {\n  if (game.state !== GameState.WAITING) {\n    throw new Error('游戏状态不正确，无法发牌');\n  }\n  \n  // 创建并洗牌\n  const fullDeck = createFullDeck();\n  const shuffledDeck = shuffleDeck(fullDeck);\n  \n  // 取出3张地主牌\n  game.landlordCards = shuffledDeck.slice(0, 3);\n  \n  // 剩余51张牌分给3个玩家，每人17张\n  const remainingCards = shuffledDeck.slice(3);\n  \n  for (let i = 0; i < 3; i++) {\n    const playerCards = remainingCards.slice(i * 17, (i + 1) * 17);\n    game.players[i].cards = sortCards(playerCards);\n    game.players[i].status = PlayerStatus.PLAYING;\n  }\n  \n  // 更新游戏状态\n  game.state = GameState.BIDDING;\n  game.phase = GamePhase.CALL_LANDLORD;\n  game.currentPlayer = 0;\n}\n\n// 叫地主\nexport function callLandlord(game: GameData, playerId: string): boolean {\n  if (game.state !== GameState.BIDDING) {\n    throw new Error('当前不是叫地主阶段');\n  }\n  \n  const player = game.players.find(p => p.id === playerId);\n  if (!player) {\n    throw new Error('玩家不存在');\n  }\n  \n  const playerIndex = game.players.findIndex(p => p.id === playerId);\n  if (playerIndex !== game.currentPlayer) {\n    throw new Error('不是当前玩家的回合');\n  }\n  \n  // 设置地主\n  game.landlordIndex = playerIndex;\n  player.isLandlord = true;\n  \n  // 将地主牌给地主\n  player.cards = [...player.cards, ...game.landlordCards];\n  player.cards = sortCards(player.cards);\n  \n  // 记录操作\n  game.moves.push({\n    playerId,\n    action: PlayerAction.CALL_LANDLORD,\n    timestamp: Date.now()\n  });\n  \n  // 更新游戏状态\n  game.state = GameState.PLAYING;\n  game.phase = GamePhase.PLAY_CARDS;\n  game.currentPlayer = game.landlordIndex;  // 地主先出牌\n  \n  return true;\n}\n\n// 不叫地主\nexport function passLandlord(game: GameData, playerId: string): boolean {\n  if (game.state !== GameState.BIDDING) {\n    throw new Error('当前不是叫地主阶段');\n  }\n  \n  const player = game.players.find(p => p.id === playerId);\n  if (!player) {\n    throw new Error('玩家不存在');\n  }\n  \n  const playerIndex = game.players.findIndex(p => p.id === playerId);\n  if (playerIndex !== game.currentPlayer) {\n    throw new Error('不是当前玩家的回合');\n  }\n  \n  // 记录操作\n  game.moves.push({\n    playerId,\n    action: PlayerAction.PASS,\n    timestamp: Date.now()\n  });\n  \n  // 轮到下一个玩家\n  game.currentPlayer = (game.currentPlayer + 1) % 3;\n  \n  // 如果所有玩家都不叫地主，重新开始\n  if (game.currentPlayer === 0 && game.landlordIndex === -1) {\n    // 简化处理：第一个玩家自动成为地主\n    return callLandlord(game, game.players[0].id);\n  }\n  \n  return true;\n}\n\n// 出牌\nexport function playCards(game: GameData, playerId: string, cards: Card[]): boolean {\n  if (game.state !== GameState.PLAYING) {\n    throw new Error('当前不是出牌阶段');\n  }\n  \n  const player = game.players.find(p => p.id === playerId);\n  if (!player) {\n    throw new Error('玩家不存在');\n  }\n  \n  const playerIndex = game.players.findIndex(p => p.id === playerId);\n  if (playerIndex !== game.currentPlayer) {\n    throw new Error('不是当前玩家的回合');\n  }\n  \n  // 验证玩家是否有这些牌\n  const playerCardStrings = player.cards.map(c => c.display);\n  const playCardStrings = cards.map(c => c.display);\n  \n  for (const cardStr of playCardStrings) {\n    if (!playerCardStrings.includes(cardStr)) {\n      throw new Error(`玩家没有牌: ${cardStr}`);\n    }\n  }\n  \n  // 检查牌型是否有效\n  const pattern = identifyCardPattern(cards);\n  if (!canPlayCards(cards, game.lastPlayedPattern)) {\n    throw new Error('无效的牌型或牌型过小');\n  }\n  \n  // 从玩家手牌中移除已出的牌\n  for (const card of cards) {\n    const index = player.cards.findIndex(c => c.display === card.display);\n    if (index !== -1) {\n      player.cards.splice(index, 1);\n    }\n  }\n  \n  // 记录操作\n  game.moves.push({\n    playerId,\n    action: PlayerAction.PLAY_CARDS,\n    cards: [...cards],\n    timestamp: Date.now()\n  });\n  \n  // 更新游戏状态\n  game.lastPlayedPattern = pattern;\n  game.lastPlayerId = playerId;\n  game.passCount = 0;\n  \n  // 检查是否有玩家出完牌\n  if (player.cards.length === 0) {\n    player.status = PlayerStatus.FINISHED;\n    game.state = GameState.FINISHED;\n    game.phase = GamePhase.GAME_OVER;\n    return true;\n  }\n  \n  // 轮到下一个玩家\n  game.currentPlayer = (game.currentPlayer + 1) % 3;\n  \n  return true;\n}\n\n// 过牌\nexport function pass(game: GameData, playerId: string): boolean {\n  if (game.state !== GameState.PLAYING) {\n    throw new Error('当前不是出牌阶段');\n  }\n  \n  const player = game.players.find(p => p.id === playerId);\n  if (!player) {\n    throw new Error('玩家不存在');\n  }\n  \n  const playerIndex = game.players.findIndex(p => p.id === playerId);\n  if (playerIndex !== game.currentPlayer) {\n    throw new Error('不是当前玩家的回合');\n  }\n  \n  // 记录操作\n  game.moves.push({\n    playerId,\n    action: PlayerAction.PASS,\n    timestamp: Date.now()\n  });\n  \n  // 更新状态\n  game.passCount++;\n  \n  // 如果连续两个玩家都过牌，清空上一手牌\n  if (game.passCount >= 2) {\n    game.lastPlayedPattern = null;\n    game.lastPlayerId = null;\n    game.passCount = 0;\n  }\n  \n  // 轮到下一个玩家\n  game.currentPlayer = (game.currentPlayer + 1) % 3;\n  \n  return true;\n}\n\n// 检查游戏是否结束\nexport function isGameOver(game: GameData): boolean {\n  return game.state === GameState.FINISHED;\n}\n\n// 获取游戏结果\nexport function getGameResult(game: GameData): { winner: Player | null; isLandlordWin: boolean } {\n  if (!isGameOver(game)) {\n    return { winner: null, isLandlordWin: false };\n  }\n  \n  const finishedPlayer = game.players.find(p => p.status === PlayerStatus.FINISHED);\n  if (!finishedPlayer) {\n    return { winner: null, isLandlordWin: false };\n  }\n  \n  return {\n    winner: finishedPlayer,\n    isLandlordWin: finishedPlayer.isLandlord\n  };\n}\n\n// 获取当前玩家\nexport function getCurrentPlayer(game: GameData): Player | null {\n  if (game.currentPlayer >= 0 && game.currentPlayer < game.players.length) {\n    return game.players[game.currentPlayer];\n  }\n  return null;\n}\n\n// 重置游戏\nexport function resetGame(game: GameData): void {\n  // 重置玩家状态\n  game.players.forEach(player => {\n    player.cards = [];\n    player.status = PlayerStatus.WAITING;\n    player.isLandlord = false;\n  });\n  \n  // 重置游戏数据\n  game.deck = [];\n  game.landlordCards = [];\n  game.currentPlayer = 0;\n  game.landlordIndex = -1;\n  game.state = GameState.WAITING;\n  game.phase = GamePhase.DEAL_CARDS;\n  game.lastPlayedPattern = null;\n  game.lastPlayerId = null;\n  game.moves = [];\n  game.round = 0;\n  game.passCount = 0;\n  game.startTime = Date.now();\n} ","import { Card } from '../types/card';\nimport { Player, PlayerType, createPlayer } from '../types/player';\nimport { \n  GameData, \n  GameState, \n  createGame, \n  dealCards, \n  callLandlord, \n  passLandlord, \n  playCards, \n  pass, \n  isGameOver,\n  getGameResult,\n  getCurrentPlayer,\n  resetGame\n} from '../logic/gameLogic';\nimport { AIPlayer, AIDifficulty } from '../ai/aiPlayer';\n\n// 游戏引擎类\nexport class GameEngine {\n  private game: GameData | null = null;\n  private gameId: string = '';\n  private eventListeners: Map<string, Function[]> = new Map();\n  private aiPlayers: Map<string, AIPlayer> = new Map();\n  private aiActionTimeout: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // 初始化事件监听器\n    this.eventListeners.set('gameStart', []);\n    this.eventListeners.set('gameEnd', []);\n    this.eventListeners.set('playerMove', []);\n    this.eventListeners.set('stateChange', []);\n    this.eventListeners.set('error', []);\n  }\n\n  // 创建新游戏\n  public createNewGame(gameId: string, playerNames: string[], aiDifficulty: AIDifficulty = AIDifficulty.MEDIUM): GameData {\n    if (playerNames.length !== 3) {\n      throw new Error('需要3个玩家');\n    }\n\n    // 清除之前的AI玩家\n    this.aiPlayers.clear();\n    if (this.aiActionTimeout) {\n      clearTimeout(this.aiActionTimeout);\n      this.aiActionTimeout = null;\n    }\n\n    // 创建玩家：第一个是人类玩家，后两个是AI\n    const players: Player[] = playerNames.map((name, index) => {\n      const playerType = index === 0 ? PlayerType.HUMAN : PlayerType.AI;\n      return createPlayer(`player_${index}`, name, playerType, index);\n    });\n\n    // 创建AI玩家实例\n    this.aiPlayers.set('player_1', new AIPlayer('player_1', aiDifficulty));\n    this.aiPlayers.set('player_2', new AIPlayer('player_2', aiDifficulty));\n\n    // 创建游戏\n    this.game = createGame(gameId, players);\n    this.gameId = gameId;\n\n    this.emit('gameStart', this.game);\n    return this.game;\n  }\n\n  // 开始游戏\n  public startGame(): void {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    if (this.game.state !== GameState.WAITING) {\n      throw new Error('游戏已经开始');\n    }\n\n    // 发牌\n    dealCards(this.game);\n    this.emit('stateChange', this.game);\n    \n    // 检查是否需要AI操作\n    this.scheduleAIAction();\n  }\n\n  // 叫地主\n  public callLandlord(playerId: string): boolean {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    try {\n      const result = callLandlord(this.game, playerId);\n      this.emit('playerMove', { playerId, action: 'call_landlord' });\n      this.emit('stateChange', this.game);\n      \n      // 调度下一个AI操作\n      this.checkAndScheduleNextAI();\n      \n      return result;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // 不叫地主\n  public passLandlord(playerId: string): boolean {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    try {\n      const result = passLandlord(this.game, playerId);\n      this.emit('playerMove', { playerId, action: 'pass_landlord' });\n      this.emit('stateChange', this.game);\n      \n      // 调度下一个AI操作\n      this.checkAndScheduleNextAI();\n      \n      return result;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // 出牌\n  public playCards(playerId: string, cards: Card[]): boolean {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    try {\n      const result = playCards(this.game, playerId, cards);\n      this.emit('playerMove', { playerId, action: 'play_cards', cards });\n      this.emit('stateChange', this.game);\n\n      // 检查游戏是否结束\n      if (isGameOver(this.game)) {\n        const gameResult = getGameResult(this.game);\n        this.emit('gameEnd', gameResult);\n      } else {\n        // 如果游戏未结束，调度下一个AI操作\n        this.checkAndScheduleNextAI();\n      }\n\n      return result;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // 过牌\n  public pass(playerId: string): boolean {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    try {\n      const result = pass(this.game, playerId);\n      this.emit('playerMove', { playerId, action: 'pass' });\n      this.emit('stateChange', this.game);\n      \n      // 调度下一个AI操作\n      this.checkAndScheduleNextAI();\n      \n      return result;\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // 获取游戏状态\n  public getGameState(): GameData | null {\n    return this.game;\n  }\n\n  // 获取当前玩家\n  public getCurrentPlayer(): Player | null {\n    if (!this.game) return null;\n    return getCurrentPlayer(this.game);\n  }\n\n  // 获取玩家手牌\n  public getPlayerCards(playerId: string): Card[] {\n    if (!this.game) return [];\n    \n    const player = this.game.players.find(p => p.id === playerId);\n    return player ? player.cards : [];\n  }\n\n  // 检查是否轮到某个玩家\n  public isPlayerTurn(playerId: string): boolean {\n    if (!this.game) return false;\n    \n    const currentPlayer = getCurrentPlayer(this.game);\n    return currentPlayer ? currentPlayer.id === playerId : false;\n  }\n\n  // 重置游戏\n  public resetGame(): void {\n    if (!this.game) {\n      throw new Error('游戏尚未创建');\n    }\n\n    // 清除AI定时器\n    if (this.aiActionTimeout) {\n      clearTimeout(this.aiActionTimeout);\n      this.aiActionTimeout = null;\n    }\n\n    resetGame(this.game);\n    this.emit('stateChange', this.game);\n  }\n\n  // 获取游戏统计信息\n  public getGameStats(): any {\n    if (!this.game) return null;\n\n    return {\n      gameId: this.game.id,\n      playersCount: this.game.players.length,\n      currentState: this.game.state,\n      currentPhase: this.game.phase,\n      currentPlayer: this.getCurrentPlayer()?.name || 'Unknown',\n      landlord: this.game.players.find(p => p.isLandlord)?.name || 'None',\n      movesCount: this.game.moves.length,\n      gameTime: Date.now() - this.game.startTime\n    };\n  }\n\n  // 添加事件监听器\n  public addEventListener(event: string, listener: Function): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(listener);\n  }\n\n  // 移除事件监听器\n  public removeEventListener(event: string, listener: Function): void {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event)!;\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  // 触发事件\n  private emit(event: string, data?: any): void {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event)!.forEach(listener => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // 验证游戏状态\n  public validateGameState(): boolean {\n    if (!this.game) return false;\n\n    // 检查玩家数量\n    if (this.game.players.length !== 3) return false;\n\n    // 检查游戏状态的一致性\n    switch (this.game.state) {\n      case GameState.WAITING:\n        return this.game.players.every(p => p.cards.length === 0);\n      \n      case GameState.BIDDING:\n        return this.game.players.every(p => p.cards.length === 17) && \n               this.game.landlordCards.length === 3;\n      \n      case GameState.PLAYING:\n        const landlord = this.game.players.find(p => p.isLandlord);\n        return landlord !== undefined && landlord.cards.length === 20;\n      \n      case GameState.FINISHED:\n        return this.game.players.some(p => p.cards.length === 0);\n      \n      default:\n        return false;\n    }\n  }\n\n  // 获取可出牌的提示\n  public getPlayableCards(playerId: string): Card[][] {\n    if (!this.game) return [];\n    \n    const player = this.game.players.find(p => p.id === playerId);\n    if (!player) return [];\n\n    // 这里可以实现AI提示算法\n    // 简化版本：返回单张牌\n    return player.cards.map(card => [card]);\n  }\n\n  // 调度AI操作\n  private scheduleAIAction(): void {\n    if (!this.game) return;\n    \n    const currentPlayer = getCurrentPlayer(this.game);\n    if (!currentPlayer || currentPlayer.type !== PlayerType.AI) return;\n    \n    const aiPlayer = this.aiPlayers.get(currentPlayer.id);\n    if (!aiPlayer) return;\n    \n    // 清除之前的定时器\n    if (this.aiActionTimeout) {\n      clearTimeout(this.aiActionTimeout);\n    }\n    \n    // 设置AI思考延迟\n    const delay = aiPlayer.getThinkingDelay();\n    this.aiActionTimeout = setTimeout(() => {\n      this.executeAIAction(currentPlayer.id);\n    }, delay);\n  }\n\n  // 执行AI操作\n  private executeAIAction(playerId: string): void {\n    if (!this.game) return;\n    \n    const aiPlayer = this.aiPlayers.get(playerId);\n    if (!aiPlayer) return;\n    \n    try {\n      if (this.game.state === GameState.BIDDING) {\n        // AI叫地主阶段\n        const decision = aiPlayer.decideLandlord(this.game);\n        \n        if (decision.action === 'call_landlord') {\n          this.callLandlord(playerId);\n        } else {\n          this.passLandlord(playerId);\n        }\n      } else if (this.game.state === GameState.PLAYING) {\n        // AI出牌阶段\n        const decision = aiPlayer.decidePlayCards(this.game);\n        \n        if (decision.action === 'play_cards' && decision.cards) {\n          this.playCards(playerId, decision.cards);\n        } else {\n          this.pass(playerId);\n        }\n      }\n    } catch (error) {\n      console.error('AI操作错误:', error);\n      // AI操作失败时，默认选择保守策略\n      if (this.game.state === GameState.BIDDING) {\n        this.passLandlord(playerId);\n      } else if (this.game.state === GameState.PLAYING) {\n        this.pass(playerId);\n      }\n    }\n  }\n\n  // 检查并调度下一个AI操作\n  private checkAndScheduleNextAI(): void {\n    // 稍微延迟一下，让UI有时间更新\n    setTimeout(() => {\n      this.scheduleAIAction();\n    }, 100);\n  }\n\n  // 销毁游戏引擎\n  public destroy(): void {\n    // 清除AI定时器\n    if (this.aiActionTimeout) {\n      clearTimeout(this.aiActionTimeout);\n      this.aiActionTimeout = null;\n    }\n    \n    this.game = null;\n    this.gameId = '';\n    this.aiPlayers.clear();\n    this.eventListeners.clear();\n  }\n} ","import { Card, CardType, CardPattern, Rank } from '../types/card';\nimport { sortCards } from '../utils/cardUtils';\n\n// 统计牌面值出现次数\nfunction countRanks(cards: Card[]): Map<Rank, number> {\n  const counts = new Map<Rank, number>();\n  cards.forEach(card => {\n    counts.set(card.rank, (counts.get(card.rank) || 0) + 1);\n  });\n  return counts;\n}\n\n// 获取相同牌面值的牌\nfunction getCardsByRank(cards: Card[], rank: Rank): Card[] {\n  return cards.filter(card => card.rank === rank);\n}\n\n// 检查是否是顺子\nfunction isStraight(ranks: Rank[], minLength: number = 5): boolean {\n  if (ranks.length < minLength) return false;\n  \n  // 大小王和A不能组成顺子\n  if (ranks.some(rank => rank >= Rank.ACE)) return false;\n  \n  const sortedRanks = [...ranks].sort((a, b) => a - b);\n  for (let i = 1; i < sortedRanks.length; i++) {\n    if (sortedRanks[i] - sortedRanks[i - 1] !== 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// 识别单张\nfunction identifySingle(cards: Card[]): CardPattern | null {\n  if (cards.length !== 1) return null;\n  \n  return {\n    type: CardType.SINGLE,\n    cards: [...cards],\n    mainRank: cards[0].rank,\n    power: cards[0].rank\n  };\n}\n\n// 识别对子\nfunction identifyPair(cards: Card[]): CardPattern | null {\n  if (cards.length !== 2) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  if (ranks.length === 1 && counts.get(ranks[0]) === 2) {\n    return {\n      type: CardType.PAIR,\n      cards: [...cards],\n      mainRank: ranks[0],\n      power: ranks[0]\n    };\n  }\n  \n  return null;\n}\n\n// 识别三张\nfunction identifyTriple(cards: Card[]): CardPattern | null {\n  if (cards.length !== 3) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  if (ranks.length === 1 && counts.get(ranks[0]) === 3) {\n    return {\n      type: CardType.TRIPLE,\n      cards: [...cards],\n      mainRank: ranks[0],\n      power: ranks[0]\n    };\n  }\n  \n  return null;\n}\n\n// 识别三带一\nfunction identifyTripleWithSingle(cards: Card[]): CardPattern | null {\n  if (cards.length !== 4) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  if (ranks.length === 2) {\n    let tripleRank: Rank | null = null;\n    let singleRank: Rank | null = null;\n    \n    for (const rank of ranks) {\n      if (counts.get(rank) === 3) {\n        tripleRank = rank;\n      } else if (counts.get(rank) === 1) {\n        singleRank = rank;\n      }\n    }\n    \n    if (tripleRank !== null && singleRank !== null) {\n      return {\n        type: CardType.TRIPLE_WITH_SINGLE,\n        cards: [...cards],\n        mainRank: tripleRank,\n        power: tripleRank\n      };\n    }\n  }\n  \n  return null;\n}\n\n// 识别三带对\nfunction identifyTripleWithPair(cards: Card[]): CardPattern | null {\n  if (cards.length !== 5) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  if (ranks.length === 2) {\n    let tripleRank: Rank | null = null;\n    let pairRank: Rank | null = null;\n    \n    for (const rank of ranks) {\n      if (counts.get(rank) === 3) {\n        tripleRank = rank;\n      } else if (counts.get(rank) === 2) {\n        pairRank = rank;\n      }\n    }\n    \n    if (tripleRank !== null && pairRank !== null) {\n      return {\n        type: CardType.TRIPLE_WITH_PAIR,\n        cards: [...cards],\n        mainRank: tripleRank,\n        power: tripleRank\n      };\n    }\n  }\n  \n  return null;\n}\n\n// 识别顺子\nfunction identifyStraight(cards: Card[]): CardPattern | null {\n  if (cards.length < 5) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  // 所有牌必须是单张\n  if (ranks.some(rank => counts.get(rank) !== 1)) return null;\n  \n  if (isStraight(ranks)) {\n    const minRank = Math.min(...ranks);\n    return {\n      type: CardType.STRAIGHT,\n      cards: sortCards(cards),\n      mainRank: minRank,\n      power: minRank\n    };\n  }\n  \n  return null;\n}\n\n// 识别双顺\nfunction identifyDoubleStraight(cards: Card[]): CardPattern | null {\n  if (cards.length < 6 || cards.length % 2 !== 0) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  // 所有牌必须是对子\n  if (ranks.some(rank => counts.get(rank) !== 2)) return null;\n  \n  if (isStraight(ranks, 3)) {\n    const minRank = Math.min(...ranks);\n    return {\n      type: CardType.DOUBLE_STRAIGHT,\n      cards: sortCards(cards),\n      mainRank: minRank,\n      power: minRank\n    };\n  }\n  \n  return null;\n}\n\n// 识别炸弹\nfunction identifyBomb(cards: Card[]): CardPattern | null {\n  if (cards.length !== 4) return null;\n  \n  const counts = countRanks(cards);\n  const ranks = Array.from(counts.keys());\n  \n  if (ranks.length === 1 && counts.get(ranks[0]) === 4) {\n    return {\n      type: CardType.BOMB,\n      cards: [...cards],\n      mainRank: ranks[0],\n      power: ranks[0] + 1000  // 炸弹的威力比普通牌型大\n    };\n  }\n  \n  return null;\n}\n\n// 识别王炸\nfunction identifyJokerBomb(cards: Card[]): CardPattern | null {\n  if (cards.length !== 2) return null;\n  \n  const ranks = cards.map(card => card.rank).sort((a, b) => a - b);\n  \n  if (ranks[0] === Rank.LITTLE_JOKER && ranks[1] === Rank.BIG_JOKER) {\n    return {\n      type: CardType.JOKER_BOMB,\n      cards: [...cards],\n      mainRank: Rank.BIG_JOKER,\n      power: 2000  // 王炸威力最大\n    };\n  }\n  \n  return null;\n}\n\n// 主要的牌型识别函数\nexport function identifyCardPattern(cards: Card[]): CardPattern {\n  if (cards.length === 0) {\n    return {\n      type: CardType.INVALID,\n      cards: [],\n      mainRank: Rank.THREE,\n      power: 0\n    };\n  }\n  \n  // 按优先级尝试识别各种牌型\n  const patterns = [\n    identifyJokerBomb,\n    identifyBomb,\n    identifySingle,\n    identifyPair,\n    identifyTriple,\n    identifyTripleWithSingle,\n    identifyTripleWithPair,\n    identifyStraight,\n    identifyDoubleStraight\n  ];\n  \n  for (const identifyFunc of patterns) {\n    const result = identifyFunc(cards);\n    if (result) {\n      return result;\n    }\n  }\n  \n  // 如果没有识别出有效牌型，返回无效\n  return {\n    type: CardType.INVALID,\n    cards: [...cards],\n    mainRank: Rank.THREE,\n    power: 0\n  };\n}\n\n// 比较两个牌型的大小\nexport function compareCardPatterns(pattern1: CardPattern, pattern2: CardPattern): number {\n  // 如果类型不同，只有炸弹能压制其他牌型\n  if (pattern1.type !== pattern2.type) {\n    if (pattern1.type === CardType.JOKER_BOMB) return 1;\n    if (pattern2.type === CardType.JOKER_BOMB) return -1;\n    if (pattern1.type === CardType.BOMB && pattern2.type !== CardType.BOMB) return 1;\n    if (pattern2.type === CardType.BOMB && pattern1.type !== CardType.BOMB) return -1;\n    return 0;  // 其他情况不能比较\n  }\n  \n  // 相同类型比较威力\n  return pattern1.power - pattern2.power;\n}\n\n// 检查是否可以出牌（基于上一手牌）\nexport function canPlayCards(cards: Card[], lastPattern: CardPattern | null): boolean {\n  const pattern = identifyCardPattern(cards);\n  \n  if (pattern.type === CardType.INVALID) {\n    return false;\n  }\n  \n  // 如果是第一手牌，任何有效牌型都可以出\n  if (!lastPattern) {\n    return true;\n  }\n  \n  // 比较牌型大小\n  return compareCardPatterns(pattern, lastPattern) > 0;\n} ","import { GameEngine } from '../engine/gameEngine';\nimport { Card, Suit, Rank } from '../types/card';\nimport { GameState } from '../logic/gameLogic';\nimport { PlayerType } from '../types/player';\nimport { AIDifficulty } from '../ai/aiPlayer';\nimport { cardsToString } from '../utils/cardUtils';\n\nexport class GameUI {\n  private engine: GameEngine;\n  private humanPlayerId: string = 'player_0'; // 人类玩家ID（固定为player_0）\n  private selectedCards: Card[] = [];\n\n  constructor() {\n    this.engine = new GameEngine();\n    this.setupEventListeners();\n    this.setupGameEngineListeners();\n  }\n\n  // 设置UI事件监听器\n  private setupEventListeners(): void {\n    console.log('设置UI事件监听器...');\n    \n    // 开始游戏按钮\n    const startBtn = document.getElementById('start-game-btn');\n    if (startBtn) {\n      startBtn.addEventListener('click', () => this.startNewGame());\n      console.log('开始游戏按钮事件已绑定');\n    }\n\n    // 叫地主按钮\n    const callLandlordBtn = document.getElementById('call-landlord-btn');\n    if (callLandlordBtn) {\n      callLandlordBtn.addEventListener('click', () => {\n        console.log('叫地主按钮被点击');\n        this.callLandlord();\n      });\n      console.log('叫地主按钮事件已绑定');\n    }\n\n    // 不叫地主按钮\n    const passLandlordBtn = document.getElementById('pass-landlord-btn');\n    if (passLandlordBtn) {\n      passLandlordBtn.addEventListener('click', () => {\n        console.log('不叫地主按钮被点击');\n        this.passLandlord();\n      });\n      console.log('不叫地主按钮事件已绑定');\n    }\n\n    // 出牌按钮\n    const playCardsBtn = document.getElementById('play-cards-btn');\n    if (playCardsBtn) {\n      playCardsBtn.addEventListener('click', () => {\n        console.log('出牌按钮被点击');\n        this.playSelectedCards();\n      });\n      console.log('出牌按钮事件已绑定');\n    }\n\n    // 过牌按钮\n    const passBtn = document.getElementById('pass-btn');\n    if (passBtn) {\n      passBtn.addEventListener('click', () => {\n        console.log('过牌按钮被点击');\n        this.pass();\n      });\n      console.log('过牌按钮事件已绑定');\n    }\n\n    // 重新开始按钮\n    const resetBtn = document.getElementById('reset-game-btn');\n    if (resetBtn) {\n      resetBtn.addEventListener('click', () => {\n        console.log('重新开始按钮被点击');\n        this.resetGame();\n      });\n      console.log('重新开始按钮事件已绑定');\n    }\n\n    // 再来一局按钮\n    const newGameBtn = document.getElementById('new-game-btn');\n    if (newGameBtn) {\n      newGameBtn.addEventListener('click', () => {\n        console.log('再来一局按钮被点击');\n        this.startNewGame();\n      });\n      console.log('再来一局按钮事件已绑定');\n    }\n  }\n\n  // 设置游戏引擎事件监听器\n  private setupGameEngineListeners(): void {\n    this.engine.addEventListener('gameStart', () => {\n      console.log('游戏开始');\n      this.hideSetupPanel();\n      this.showGameBoard();\n    });\n\n    this.engine.addEventListener('stateChange', (gameData: any) => {\n      this.updateGameDisplay(gameData);\n    });\n\n    this.engine.addEventListener('gameEnd', (result: any) => {\n      this.showGameResult(result);\n    });\n\n    this.engine.addEventListener('error', (error: any) => {\n      this.showMessage(error.message, 'error');\n    });\n  }\n\n  // 开始新游戏\n  private startNewGame(): void {\n    try {\n      const player1Name = (document.getElementById('player1') as HTMLInputElement).value || '我';\n      const player2Name = (document.getElementById('player2') as HTMLInputElement).value || '电脑1';\n      const player3Name = (document.getElementById('player3') as HTMLInputElement).value || '电脑2';\n      \n      // 获取AI难度设置\n      const difficultySelect = document.getElementById('ai-difficulty') as HTMLSelectElement;\n      const difficulty = (difficultySelect?.value || 'medium') as AIDifficulty;\n\n      const gameData = this.engine.createNewGame('game_1', [player1Name, player2Name, player3Name], difficulty);\n      this.engine.startGame();\n      \n      this.hideResultPanel();\n      this.showMessage(`游戏开始！AI难度: ${this.getDifficultyText(difficulty)}`, 'success');\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 获取难度显示文本\n  private getDifficultyText(difficulty: AIDifficulty): string {\n    switch (difficulty) {\n      case AIDifficulty.EASY:\n        return '简单';\n      case AIDifficulty.MEDIUM:\n        return '中等';\n      case AIDifficulty.HARD:\n        return '困难';\n      default:\n        return '中等';\n    }\n  }\n\n  // 叫地主\n  private callLandlord(): void {\n    try {\n      this.engine.callLandlord(this.humanPlayerId);\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 不叫地主\n  private passLandlord(): void {\n    try {\n      this.engine.passLandlord(this.humanPlayerId);\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 出牌\n  private playSelectedCards(): void {\n    if (this.selectedCards.length === 0) {\n      this.showMessage('请选择要出的牌', 'error');\n      return;\n    }\n\n    try {\n      this.engine.playCards(this.humanPlayerId, this.selectedCards);\n      this.selectedCards = [];\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 过牌\n  private pass(): void {\n    try {\n      this.engine.pass(this.humanPlayerId);\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 重置游戏\n  private resetGame(): void {\n    try {\n      this.engine.resetGame();\n      this.engine.startGame(); // 重新发牌和开始游戏\n      this.selectedCards = [];\n      this.showMessage('游戏已重置，重新开始！', 'success');\n    } catch (error: any) {\n      this.showMessage(error.message, 'error');\n    }\n  }\n\n  // 更新游戏显示\n  private updateGameDisplay(gameData: any): void {\n    this.updateGameStatus(gameData);\n    this.updatePlayerInfo(gameData);\n    this.updatePlayerCards(gameData);\n    this.updateLastPlayedCards(gameData);\n    this.updateActionButtons(gameData);\n  }\n\n  // 更新游戏状态\n  private updateGameStatus(gameData: any): void {\n    const gameStateEl = document.getElementById('game-state');\n    const currentPlayerEl = document.getElementById('current-player');\n    \n    if (gameStateEl) {\n      let stateText = '';\n      switch (gameData.state) {\n        case GameState.WAITING:\n          stateText = '等待开始';\n          break;\n        case GameState.BIDDING:\n          stateText = '叫地主阶段';\n          break;\n        case GameState.PLAYING:\n          stateText = '游戏进行中';\n          break;\n        case GameState.FINISHED:\n          stateText = '游戏结束';\n          break;\n      }\n      gameStateEl.textContent = stateText;\n    }\n\n    if (currentPlayerEl) {\n      const currentPlayer = gameData.players[gameData.currentPlayer];\n      currentPlayerEl.textContent = `当前玩家: ${currentPlayer ? currentPlayer.name : '无'}`;\n    }\n  }\n\n  // 更新玩家信息\n  private updatePlayerInfo(gameData: any): void {\n    // HTML中有两个AI玩家显示区域：player-0 和 player-1\n    // 我们需要显示 gameData.players[1] 和 gameData.players[2]（两个AI玩家）\n    \n    const aiPlayers = gameData.players.filter((p: any) => p.type === PlayerType.AI);\n    \n    // 更新第一个AI玩家（显示在 player-0 区域）\n    const firstAiEl = document.getElementById('player-0');\n    if (firstAiEl && aiPlayers.length > 0) {\n      const firstAi = aiPlayers[0];\n      const nameEl = firstAiEl.querySelector('.player-name');\n      const cardCountEl = firstAiEl.querySelector('.card-count');\n      const roleEl = firstAiEl.querySelector('.player-role');\n      \n      if (nameEl) nameEl.textContent = `${firstAi.name} (AI)`;\n      if (cardCountEl) cardCountEl.textContent = `${firstAi.cards.length}张牌`;\n      if (roleEl) roleEl.textContent = firstAi.isLandlord ? '地主' : '';\n    }\n    \n    // 更新第二个AI玩家（显示在 player-1 区域）\n    const secondAiEl = document.getElementById('player-1');\n    if (secondAiEl && aiPlayers.length > 1) {\n      const secondAi = aiPlayers[1];\n      const nameEl = secondAiEl.querySelector('.player-name');\n      const cardCountEl = secondAiEl.querySelector('.card-count');\n      const roleEl = secondAiEl.querySelector('.player-role');\n      \n      if (nameEl) nameEl.textContent = `${secondAi.name} (AI)`;\n      if (cardCountEl) cardCountEl.textContent = `${secondAi.cards.length}张牌`;\n      if (roleEl) roleEl.textContent = secondAi.isLandlord ? '地主' : '';\n    }\n\n    // 更新人类玩家信息（显示在底部）\n    const currentPlayerInfo = document.getElementById('current-player-info');\n    if (currentPlayerInfo) {\n      const humanPlayer = gameData.players.find((p: any) => p.id === this.humanPlayerId);\n      const nameEl = currentPlayerInfo.querySelector('.player-name');\n      const roleEl = currentPlayerInfo.querySelector('.player-role');\n      \n      if (nameEl) nameEl.textContent = humanPlayer ? humanPlayer.name : '玩家';\n      if (roleEl) roleEl.textContent = humanPlayer && humanPlayer.isLandlord ? '地主' : '';\n    }\n  }\n\n  // 更新玩家手牌\n  private updatePlayerCards(gameData: any): void {\n    const playerCardsEl = document.getElementById('player-cards');\n    if (!playerCardsEl) return;\n\n    // 显示人类玩家（player_0）的手牌\n    const humanPlayer = gameData.players.find((p: any) => p.id === this.humanPlayerId);\n    if (!humanPlayer) return;\n\n    playerCardsEl.innerHTML = '';\n    \n    humanPlayer.cards.forEach((card: Card) => {\n      const cardEl = this.createCardElement(card);\n      // 只有轮到人类玩家时才允许选择牌\n      const currentPlayer = gameData.players[gameData.currentPlayer];\n      const isHumanTurn = currentPlayer && currentPlayer.type === PlayerType.HUMAN;\n      \n      if (isHumanTurn) {\n        cardEl.addEventListener('click', () => this.toggleCardSelection(card, cardEl));\n      } else {\n        cardEl.style.opacity = '0.7'; // AI回合时手牌变灰\n        cardEl.style.cursor = 'not-allowed';\n      }\n      \n      playerCardsEl.appendChild(cardEl);\n    });\n  }\n\n  // 创建牌元素\n  private createCardElement(card: Card): HTMLElement {\n    const cardEl = document.createElement('div');\n    cardEl.className = 'card';\n    cardEl.textContent = card.display;\n    \n    // 添加颜色样式\n    if (card.suit === Suit.HEARTS || card.suit === Suit.DIAMONDS) {\n      cardEl.classList.add('red');\n    } else if (card.suit === Suit.SPADES || card.suit === Suit.CLUBS) {\n      cardEl.classList.add('black');\n    } else {\n      cardEl.classList.add('joker');\n    }\n    \n    return cardEl;\n  }\n\n  // 切换牌的选中状态\n  private toggleCardSelection(card: Card, cardEl: HTMLElement): void {\n    const index = this.selectedCards.findIndex(c => c.display === card.display);\n    \n    if (index >= 0) {\n      // 取消选中\n      this.selectedCards.splice(index, 1);\n      cardEl.classList.remove('selected');\n    } else {\n      // 选中\n      this.selectedCards.push(card);\n      cardEl.classList.add('selected');\n    }\n  }\n\n  // 更新上一手牌显示\n  private updateLastPlayedCards(gameData: any): void {\n    const lastCardsEl = document.getElementById('last-cards');\n    const lastPlayerEl = document.getElementById('last-player');\n    \n    if (lastCardsEl) {\n      if (gameData.lastPlayedPattern && gameData.lastPlayedPattern.cards.length > 0) {\n        lastCardsEl.innerHTML = '';\n        gameData.lastPlayedPattern.cards.forEach((card: Card) => {\n          const cardEl = this.createCardElement(card);\n          cardEl.style.transform = 'scale(0.8)';\n          lastCardsEl.appendChild(cardEl);\n        });\n      } else {\n        lastCardsEl.innerHTML = '<span class=\"no-cards\">暂无</span>';\n      }\n    }\n\n    if (lastPlayerEl) {\n      if (gameData.lastPlayerId) {\n        const lastPlayer = gameData.players.find((p: any) => p.id === gameData.lastPlayerId);\n        lastPlayerEl.textContent = lastPlayer ? `${lastPlayer.name} 出牌` : '';\n      } else {\n        lastPlayerEl.textContent = '';\n      }\n    }\n  }\n\n  // 更新操作按钮\n  private updateActionButtons(gameData: any): void {\n    const callLandlordBtn = document.getElementById('call-landlord-btn');\n    const passLandlordBtn = document.getElementById('pass-landlord-btn');\n    const playCardsBtn = document.getElementById('play-cards-btn');\n    const passBtn = document.getElementById('pass-btn');\n    const resetBtn = document.getElementById('reset-game-btn');\n\n    // 隐藏所有按钮\n    [callLandlordBtn, passLandlordBtn, playCardsBtn, passBtn, resetBtn].forEach(btn => {\n      if (btn) btn.classList.add('hidden');\n    });\n\n    // 检查当前玩家是否是人类玩家\n    const currentPlayer = gameData.players[gameData.currentPlayer];\n    const isHumanTurn = currentPlayer && currentPlayer.type === PlayerType.HUMAN;\n\n    console.log('按钮状态更新:', {\n      gameState: gameData.state,\n      currentPlayerId: gameData.currentPlayer,\n      currentPlayerType: currentPlayer ? currentPlayer.type : 'none',\n      isHumanTurn: isHumanTurn\n    });\n\n    // 只有轮到人类玩家时才显示操作按钮\n    if (isHumanTurn) {\n      if (gameData.state === GameState.BIDDING) {\n        // 在叫地主阶段，显示叫地主按钮\n        if (callLandlordBtn) {\n          callLandlordBtn.classList.remove('hidden');\n          console.log('显示叫地主按钮');\n        }\n        if (passLandlordBtn) {\n          passLandlordBtn.classList.remove('hidden');\n          console.log('显示不叫地主按钮');\n        }\n      } else if (gameData.state === GameState.PLAYING) {\n        // 在游戏阶段，显示出牌按钮\n        if (playCardsBtn) {\n          playCardsBtn.classList.remove('hidden');\n          console.log('显示出牌按钮');\n        }\n        if (passBtn) {\n          passBtn.classList.remove('hidden');\n          console.log('显示过牌按钮');\n        }\n      }\n    }\n\n    // 在游戏进行中或结束时显示重置按钮\n    if (gameData.state === GameState.PLAYING || gameData.state === GameState.FINISHED) {\n      if (resetBtn) {\n        resetBtn.classList.remove('hidden');\n        console.log('显示重置按钮');\n      }\n    }\n  }\n\n  // 显示游戏结果\n  private showGameResult(result: any): void {\n    const resultPanel = document.getElementById('result-panel');\n    const winnerInfo = document.getElementById('winner-info');\n    const gameStats = document.getElementById('game-stats');\n    \n    if (resultPanel) resultPanel.classList.remove('hidden');\n    \n    if (winnerInfo && result.winner) {\n      const winType = result.isLandlordWin ? '地主获胜' : '农民获胜';\n      winnerInfo.textContent = `${result.winner.name} 获胜！（${winType}）`;\n    }\n    \n    if (gameStats) {\n      const stats = this.engine.getGameStats();\n      gameStats.innerHTML = `\n        <p>游戏时长: ${Math.floor(stats.gameTime / 1000)}秒</p>\n        <p>总回合数: ${stats.movesCount}</p>\n        <p>地主: ${stats.landlord}</p>\n      `;\n    }\n  }\n\n  // 显示消息\n  private showMessage(message: string, type: 'success' | 'error' = 'success'): void {\n    const messagePanel = document.getElementById('message-panel');\n    if (!messagePanel) return;\n\n    messagePanel.textContent = message;\n    messagePanel.className = `message-panel ${type} show`;\n    \n    // 3秒后自动隐藏\n    setTimeout(() => {\n      messagePanel.classList.remove('show');\n    }, 3000);\n  }\n\n  // 隐藏设置面板\n  private hideSetupPanel(): void {\n    const setupPanel = document.getElementById('setup-panel');\n    if (setupPanel) setupPanel.classList.add('hidden');\n  }\n\n  // 显示游戏面板\n  private showGameBoard(): void {\n    const gameBoard = document.getElementById('game-board');\n    if (gameBoard) gameBoard.classList.remove('hidden');\n  }\n\n  // 隐藏结果面板\n  private hideResultPanel(): void {\n    const resultPanel = document.getElementById('result-panel');\n    if (resultPanel) resultPanel.classList.add('hidden');\n  }\n\n  // 销毁UI\n  public destroy(): void {\n    this.engine.destroy();\n    this.selectedCards = [];\n  }\n} ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n",""],"names":[],"sourceRoot":""}