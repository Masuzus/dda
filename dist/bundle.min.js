(()=>{"use strict";var e={156:function(e,t,a){var r=this&&this.__createBinding||(Object.create?function(e,t,a,r){void 0===r&&(r=a);var n=Object.getOwnPropertyDescriptor(t,a);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[a]}}),Object.defineProperty(e,r,n)}:function(e,t,a,r){void 0===r&&(r=a),e[r]=t[a]}),n=this&&this.__exportStar||function(e,t){for(var a in e)"default"===a||Object.prototype.hasOwnProperty.call(t,a)||r(t,e,a)};Object.defineProperty(t,"__esModule",{value:!0});const s=a(927);document.addEventListener("DOMContentLoaded",()=>{console.log("打大A游戏正在加载...");const e=new s.GameUI;window.gameUI=e,console.log("打大A游戏已加载完成！")}),n(a(458),t),n(a(493),t),n(a(709),t),n(a(745),t),n(a(731),t),n(a(927),t),n(a(361),t),n(a(668),t)},361:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cardsToString=t.cardToString=t.sortCards=t.compareCards=t.shuffleDeck=t.createFullDeck=t.createCard=void 0;const r=a(458);function n(e,t){let a;return a=t===r.Rank.LITTLE_JOKER||t===r.Rank.BIG_JOKER?r.RankDisplay[t]:`${r.SuitDisplay[e]}${r.RankDisplay[t]}`,{suit:e,rank:t,display:a}}function s(e,t){return e.rank-t.rank}function i(e){return e.display}t.createCard=n,t.createFullDeck=function(){const e=[];for(const t of Object.values(r.Suit))for(let a=r.Rank.THREE;a<=r.Rank.ACE;a++)e.push(n(t,a));return e.push(n(null,r.Rank.LITTLE_JOKER)),e.push(n(null,r.Rank.BIG_JOKER)),e},t.shuffleDeck=function(e){const t=[...e];for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}return t},t.compareCards=s,t.sortCards=function(e){return[...e].sort(s)},t.cardToString=i,t.cardsToString=function(e){return e.map(i).join(" ")}},458:(e,t)=>{var a,r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.RankDisplay=t.SuitDisplay=t.CardType=t.Rank=t.Suit=void 0,function(e){e.SPADES="spades",e.HEARTS="hearts",e.DIAMONDS="diamonds",e.CLUBS="clubs"}(a=t.Suit||(t.Suit={})),function(e){e[e.THREE=3]="THREE",e[e.FOUR=4]="FOUR",e[e.FIVE=5]="FIVE",e[e.SIX=6]="SIX",e[e.SEVEN=7]="SEVEN",e[e.EIGHT=8]="EIGHT",e[e.NINE=9]="NINE",e[e.TEN=10]="TEN",e[e.JACK=11]="JACK",e[e.QUEEN=12]="QUEEN",e[e.KING=13]="KING",e[e.ACE=14]="ACE",e[e.LITTLE_JOKER=15]="LITTLE_JOKER",e[e.BIG_JOKER=16]="BIG_JOKER"}(r=t.Rank||(t.Rank={})),(n=t.CardType||(t.CardType={})).SINGLE="single",n.PAIR="pair",n.TRIPLE="triple",n.TRIPLE_WITH_SINGLE="triple_with_single",n.TRIPLE_WITH_PAIR="triple_with_pair",n.STRAIGHT="straight",n.DOUBLE_STRAIGHT="double_straight",n.TRIPLE_STRAIGHT="triple_straight",n.FOUR_WITH_TWO="four_with_two",n.BOMB="bomb",n.JOKER_BOMB="joker_bomb",n.INVALID="invalid",t.SuitDisplay={[a.SPADES]:"♠",[a.HEARTS]:"♥",[a.DIAMONDS]:"♦",[a.CLUBS]:"♣"},t.RankDisplay={[r.THREE]:"3",[r.FOUR]:"4",[r.FIVE]:"5",[r.SIX]:"6",[r.SEVEN]:"7",[r.EIGHT]:"8",[r.NINE]:"9",[r.TEN]:"10",[r.JACK]:"J",[r.QUEEN]:"Q",[r.KING]:"K",[r.ACE]:"A",[r.LITTLE_JOKER]:"小王",[r.BIG_JOKER]:"大王"}},493:(e,t)=>{var a,r,n;Object.defineProperty(t,"__esModule",{value:!0}),t.calculateWinRate=t.createPlayer=t.PlayerAction=t.PlayerType=t.PlayerStatus=void 0,function(e){e.WAITING="waiting",e.PLAYING="playing",e.FINISHED="finished",e.DISCONNECTED="disconnected"}(a=t.PlayerStatus||(t.PlayerStatus={})),(n=t.PlayerType||(t.PlayerType={})).HUMAN="human",n.AI="ai",(r=t.PlayerAction||(t.PlayerAction={})).PASS="pass",r.PLAY_CARDS="play_cards",r.CALL_LANDLORD="call_landlord",r.GRAB_LANDLORD="grab_landlord",t.createPlayer=function(e,t,r,n){return{id:e,name:t,type:r,status:a.WAITING,cards:[],position:n,score:0,isLandlord:!1,totalGames:0,wins:0}},t.calculateWinRate=function(e,t){return 0===t?0:Math.round(e/t*100*100)/100}},668:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AIPlayer=t.AIDifficulty=void 0;const r=a(458),n=a(745),s=a(361);var i;!function(e){e.EASY="easy",e.MEDIUM="medium",e.HARD="hard"}(i=t.AIDifficulty||(t.AIDifficulty={})),t.AIPlayer=class{constructor(e,t=i.MEDIUM){this.playerId=e,this.difficulty=t}decideLandlord(e){const t=e.players.find(e=>e.id===this.playerId);if(!t)return{action:"pass_landlord",confidence:0};const a=this.evaluateHandStrength(t.cards);return{action:this.shouldCallLandlord(a,e)?"call_landlord":"pass_landlord",confidence:a/100}}decidePlayCards(e){const t=e.players.find(e=>e.id===this.playerId);if(!t)return{action:"pass",confidence:0};if(!e.lastPlayedPattern)return{action:"play_cards",cards:this.findBestFirstPlay(t.cards),confidence:.8};const a=this.findCounterPlay(t.cards,e.lastPlayedPattern);return a.length>0?{action:"play_cards",cards:a,confidence:.7}:{action:"pass",confidence:.9}}evaluateHandStrength(e){let t=0;const a=(0,s.sortCards)(e),n=this.countRanks(a);n.get(r.Rank.BIG_JOKER)&&(t+=15),n.get(r.Rank.LITTLE_JOKER)&&(t+=10);for(const[e,a]of n)4===a&&(t+=20),3===a&&(t+=8),2===a&&(t+=3);return n.get(r.Rank.ACE)&&(t+=5*n.get(r.Rank.ACE)),n.get(r.Rank.KING)&&(t+=4*n.get(r.Rank.KING)),e.length<=5&&(t+=10*(6-e.length)),Math.min(t,100)}shouldCallLandlord(e,t){switch(this.difficulty){case i.EASY:return e>60+20*Math.random();case i.MEDIUM:return e>45+15*Math.random();case i.HARD:return e>40+(0===t.currentPlayer?5:0)+10*Math.random();default:return e>50}}findBestFirstPlay(e){const t=(0,s.sortCards)(e),a=t[0];if((0,n.identifyCardPattern)([a]).type!==r.CardType.INVALID)return[a];const i=this.countRanks(t);for(const[e,a]of i)if(a>=2)return t.filter(t=>t.rank===e).slice(0,2);return[a]}findCounterPlay(e,t){const a=(0,s.sortCards)(e),r=this.findSameTypePlay(a,t);if(r.length>0)return r;const n=this.findBombPlay(a);return n.length>0?n:[]}findSameTypePlay(e,t){const a=t.type,n=t.power;switch(t.cards.length,a){case r.CardType.SINGLE:return this.findBiggerSingle(e,n);case r.CardType.PAIR:return this.findBiggerPair(e,n);case r.CardType.TRIPLE:return this.findBiggerTriple(e,n);case r.CardType.BOMB:return this.findBiggerBomb(e,n);default:return[]}}findBiggerSingle(e,t){const a=e.filter(e=>{const a=(0,n.identifyCardPattern)([e]);return a.type===r.CardType.SINGLE&&a.power>t});return a.length>0?[a.reduce((e,t)=>t.rank<e.rank?t:e)]:[]}findBiggerPair(e,t){const a=this.countRanks(e);for(const[s,i]of a)if(i>=2&&s>t){const t=e.filter(e=>e.rank===s).slice(0,2);if((0,n.identifyCardPattern)(t).type===r.CardType.PAIR)return t}return[]}findBiggerTriple(e,t){const a=this.countRanks(e);for(const[s,i]of a)if(i>=3&&s>t){const t=e.filter(e=>e.rank===s).slice(0,3);if((0,n.identifyCardPattern)(t).type===r.CardType.TRIPLE)return t}return[]}findBiggerBomb(e,t){const a=e.some(e=>e.rank===r.Rank.LITTLE_JOKER),s=e.some(e=>e.rank===r.Rank.BIG_JOKER);if(a&&s){const a=e.filter(e=>e.rank===r.Rank.LITTLE_JOKER||e.rank===r.Rank.BIG_JOKER),s=(0,n.identifyCardPattern)(a);if(s.type===r.CardType.JOKER_BOMB&&s.power>t)return a}const i=this.countRanks(e);for(const[a,r]of i)if(4===r&&a+1e3>t)return e.filter(e=>e.rank===a);return[]}findBombPlay(e){const t=e.some(e=>e.rank===r.Rank.LITTLE_JOKER),a=e.some(e=>e.rank===r.Rank.BIG_JOKER);if(t&&a)return e.filter(e=>e.rank===r.Rank.LITTLE_JOKER||e.rank===r.Rank.BIG_JOKER);const n=this.countRanks(e);for(const[t,a]of n)if(4===a){if(this.difficulty===i.EASY&&Math.random()<.7)continue;return e.filter(e=>e.rank===t)}return[]}countRanks(e){const t=new Map;return e.forEach(e=>{t.set(e.rank,(t.get(e.rank)||0)+1)}),t}getThinkingDelay(){const e=800,t=1200*Math.random();switch(this.difficulty){case i.EASY:return e+.5*t;case i.MEDIUM:return e+t;case i.HARD:return e+1.5*t;default:return e+t}}}},709:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resetGame=t.getCurrentPlayer=t.getGameResult=t.isGameOver=t.pass=t.playCards=t.passLandlord=t.callLandlord=t.dealCards=t.createGame=t.GamePhase=t.GameState=void 0;const r=a(493),n=a(361),s=a(745);var i,l;function o(e,t){if(e.state!==i.BIDDING)throw new Error("当前不是叫地主阶段");const a=e.players.find(e=>e.id===t);if(!a)throw new Error("玩家不存在");const s=e.players.findIndex(e=>e.id===t);if(s!==e.currentPlayer)throw new Error("不是当前玩家的回合");return e.landlordIndex=s,a.isLandlord=!0,a.cards=[...a.cards,...e.landlordCards],a.cards=(0,n.sortCards)(a.cards),e.moves.push({playerId:t,action:r.PlayerAction.CALL_LANDLORD,timestamp:Date.now()}),e.state=i.PLAYING,e.phase=l.PLAY_CARDS,e.currentPlayer=e.landlordIndex,!0}function d(e){return e.state===i.FINISHED}!function(e){e.WAITING="waiting",e.BIDDING="bidding",e.PLAYING="playing",e.FINISHED="finished",e.PAUSED="paused"}(i=t.GameState||(t.GameState={})),function(e){e.DEAL_CARDS="deal_cards",e.CALL_LANDLORD="call_landlord",e.PLAY_CARDS="play_cards",e.GAME_OVER="game_over"}(l=t.GamePhase||(t.GamePhase={})),t.createGame=function(e,t){if(3!==t.length)throw new Error("打大A需要3个玩家");return{id:e,players:t.map(e=>({...e,status:r.PlayerStatus.WAITING})),deck:[],landlordCards:[],currentPlayer:0,landlordIndex:-1,state:i.WAITING,phase:l.DEAL_CARDS,lastPlayedPattern:null,lastPlayerId:null,moves:[],round:0,passCount:0,startTime:Date.now()}},t.dealCards=function(e){if(e.state!==i.WAITING)throw new Error("游戏状态不正确，无法发牌");const t=(0,n.createFullDeck)(),a=(0,n.shuffleDeck)(t);e.landlordCards=a.slice(0,3);const s=a.slice(3);for(let t=0;t<3;t++){const a=s.slice(17*t,17*(t+1));e.players[t].cards=(0,n.sortCards)(a),e.players[t].status=r.PlayerStatus.PLAYING}e.state=i.BIDDING,e.phase=l.CALL_LANDLORD,e.currentPlayer=0},t.callLandlord=o,t.passLandlord=function(e,t){if(e.state!==i.BIDDING)throw new Error("当前不是叫地主阶段");if(!e.players.find(e=>e.id===t))throw new Error("玩家不存在");if(e.players.findIndex(e=>e.id===t)!==e.currentPlayer)throw new Error("不是当前玩家的回合");return e.moves.push({playerId:t,action:r.PlayerAction.PASS,timestamp:Date.now()}),e.currentPlayer=(e.currentPlayer+1)%3,0!==e.currentPlayer||-1!==e.landlordIndex||o(e,e.players[0].id)},t.playCards=function(e,t,a){if(e.state!==i.PLAYING)throw new Error("当前不是出牌阶段");const n=e.players.find(e=>e.id===t);if(!n)throw new Error("玩家不存在");if(e.players.findIndex(e=>e.id===t)!==e.currentPlayer)throw new Error("不是当前玩家的回合");const o=n.cards.map(e=>e.display),d=a.map(e=>e.display);for(const e of d)if(!o.includes(e))throw new Error(`玩家没有牌: ${e}`);const c=(0,s.identifyCardPattern)(a);if(!(0,s.canPlayCards)(a,e.lastPlayedPattern))throw new Error("无效的牌型或牌型过小");for(const e of a){const t=n.cards.findIndex(t=>t.display===e.display);-1!==t&&n.cards.splice(t,1)}return e.moves.push({playerId:t,action:r.PlayerAction.PLAY_CARDS,cards:[...a],timestamp:Date.now()}),e.lastPlayedPattern=c,e.lastPlayerId=t,e.passCount=0,0===n.cards.length?(n.status=r.PlayerStatus.FINISHED,e.state=i.FINISHED,e.phase=l.GAME_OVER,!0):(e.currentPlayer=(e.currentPlayer+1)%3,!0)},t.pass=function(e,t){if(e.state!==i.PLAYING)throw new Error("当前不是出牌阶段");if(!e.players.find(e=>e.id===t))throw new Error("玩家不存在");if(e.players.findIndex(e=>e.id===t)!==e.currentPlayer)throw new Error("不是当前玩家的回合");return e.moves.push({playerId:t,action:r.PlayerAction.PASS,timestamp:Date.now()}),e.passCount++,e.passCount>=2&&(e.lastPlayedPattern=null,e.lastPlayerId=null,e.passCount=0),e.currentPlayer=(e.currentPlayer+1)%3,!0},t.isGameOver=d,t.getGameResult=function(e){if(!d(e))return{winner:null,isLandlordWin:!1};const t=e.players.find(e=>e.status===r.PlayerStatus.FINISHED);return t?{winner:t,isLandlordWin:t.isLandlord}:{winner:null,isLandlordWin:!1}},t.getCurrentPlayer=function(e){return e.currentPlayer>=0&&e.currentPlayer<e.players.length?e.players[e.currentPlayer]:null},t.resetGame=function(e){e.players.forEach(e=>{e.cards=[],e.status=r.PlayerStatus.WAITING,e.isLandlord=!1}),e.deck=[],e.landlordCards=[],e.currentPlayer=0,e.landlordIndex=-1,e.state=i.WAITING,e.phase=l.DEAL_CARDS,e.lastPlayedPattern=null,e.lastPlayerId=null,e.moves=[],e.round=0,e.passCount=0,e.startTime=Date.now()}},731:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameEngine=void 0;const r=a(493),n=a(709),s=a(668);t.GameEngine=class{constructor(){this.game=null,this.gameId="",this.eventListeners=new Map,this.aiPlayers=new Map,this.aiActionTimeout=null,this.eventListeners.set("gameStart",[]),this.eventListeners.set("gameEnd",[]),this.eventListeners.set("playerMove",[]),this.eventListeners.set("stateChange",[]),this.eventListeners.set("error",[])}createNewGame(e,t,a=s.AIDifficulty.MEDIUM){if(3!==t.length)throw new Error("需要3个玩家");this.aiPlayers.clear(),this.aiActionTimeout&&(clearTimeout(this.aiActionTimeout),this.aiActionTimeout=null);const i=t.map((e,t)=>{const a=0===t?r.PlayerType.HUMAN:r.PlayerType.AI;return(0,r.createPlayer)(`player_${t}`,e,a,t)});return this.aiPlayers.set("player_1",new s.AIPlayer("player_1",a)),this.aiPlayers.set("player_2",new s.AIPlayer("player_2",a)),this.game=(0,n.createGame)(e,i),this.gameId=e,this.emit("gameStart",this.game),this.game}startGame(){if(!this.game)throw new Error("游戏尚未创建");if(this.game.state!==n.GameState.WAITING)throw new Error("游戏已经开始");(0,n.dealCards)(this.game),this.emit("stateChange",this.game),this.scheduleAIAction()}callLandlord(e){if(!this.game)throw new Error("游戏尚未创建");try{const t=(0,n.callLandlord)(this.game,e);return this.emit("playerMove",{playerId:e,action:"call_landlord"}),this.emit("stateChange",this.game),this.checkAndScheduleNextAI(),t}catch(e){throw this.emit("error",e),e}}passLandlord(e){if(!this.game)throw new Error("游戏尚未创建");try{const t=(0,n.passLandlord)(this.game,e);return this.emit("playerMove",{playerId:e,action:"pass_landlord"}),this.emit("stateChange",this.game),this.checkAndScheduleNextAI(),t}catch(e){throw this.emit("error",e),e}}playCards(e,t){if(!this.game)throw new Error("游戏尚未创建");try{const a=(0,n.playCards)(this.game,e,t);if(this.emit("playerMove",{playerId:e,action:"play_cards",cards:t}),this.emit("stateChange",this.game),(0,n.isGameOver)(this.game)){const e=(0,n.getGameResult)(this.game);this.emit("gameEnd",e)}else this.checkAndScheduleNextAI();return a}catch(e){throw this.emit("error",e),e}}pass(e){if(!this.game)throw new Error("游戏尚未创建");try{const t=(0,n.pass)(this.game,e);return this.emit("playerMove",{playerId:e,action:"pass"}),this.emit("stateChange",this.game),this.checkAndScheduleNextAI(),t}catch(e){throw this.emit("error",e),e}}getGameState(){return this.game}getCurrentPlayer(){return this.game?(0,n.getCurrentPlayer)(this.game):null}getPlayerCards(e){if(!this.game)return[];const t=this.game.players.find(t=>t.id===e);return t?t.cards:[]}isPlayerTurn(e){if(!this.game)return!1;const t=(0,n.getCurrentPlayer)(this.game);return!!t&&t.id===e}resetGame(){if(!this.game)throw new Error("游戏尚未创建");this.aiActionTimeout&&(clearTimeout(this.aiActionTimeout),this.aiActionTimeout=null),(0,n.resetGame)(this.game),this.emit("stateChange",this.game)}getGameStats(){return this.game?{gameId:this.game.id,playersCount:this.game.players.length,currentState:this.game.state,currentPhase:this.game.phase,currentPlayer:this.getCurrentPlayer()?.name||"Unknown",landlord:this.game.players.find(e=>e.isLandlord)?.name||"None",movesCount:this.game.moves.length,gameTime:Date.now()-this.game.startTime}:null}addEventListener(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}removeEventListener(e,t){if(this.eventListeners.has(e)){const a=this.eventListeners.get(e),r=a.indexOf(t);r>-1&&a.splice(r,1)}}emit(e,t){this.eventListeners.has(e)&&this.eventListeners.get(e).forEach(a=>{try{a(t)}catch(t){console.error(`Error in event listener for ${e}:`,t)}})}validateGameState(){if(!this.game)return!1;if(3!==this.game.players.length)return!1;switch(this.game.state){case n.GameState.WAITING:return this.game.players.every(e=>0===e.cards.length);case n.GameState.BIDDING:return this.game.players.every(e=>17===e.cards.length)&&3===this.game.landlordCards.length;case n.GameState.PLAYING:const e=this.game.players.find(e=>e.isLandlord);return void 0!==e&&20===e.cards.length;case n.GameState.FINISHED:return this.game.players.some(e=>0===e.cards.length);default:return!1}}getPlayableCards(e){if(!this.game)return[];const t=this.game.players.find(t=>t.id===e);return t?t.cards.map(e=>[e]):[]}scheduleAIAction(){if(!this.game)return;const e=(0,n.getCurrentPlayer)(this.game);if(!e||e.type!==r.PlayerType.AI)return;const t=this.aiPlayers.get(e.id);if(!t)return;this.aiActionTimeout&&clearTimeout(this.aiActionTimeout);const a=t.getThinkingDelay();this.aiActionTimeout=setTimeout(()=>{this.executeAIAction(e.id)},a)}executeAIAction(e){if(!this.game)return;const t=this.aiPlayers.get(e);if(t)try{if(this.game.state===n.GameState.BIDDING)"call_landlord"===t.decideLandlord(this.game).action?this.callLandlord(e):this.passLandlord(e);else if(this.game.state===n.GameState.PLAYING){const a=t.decidePlayCards(this.game);"play_cards"===a.action&&a.cards?this.playCards(e,a.cards):this.pass(e)}}catch(t){console.error("AI操作错误:",t),this.game.state===n.GameState.BIDDING?this.passLandlord(e):this.game.state===n.GameState.PLAYING&&this.pass(e)}}checkAndScheduleNextAI(){setTimeout(()=>{this.scheduleAIAction()},100)}destroy(){this.aiActionTimeout&&(clearTimeout(this.aiActionTimeout),this.aiActionTimeout=null),this.game=null,this.gameId="",this.aiPlayers.clear(),this.eventListeners.clear()}}},745:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.canPlayCards=t.compareCardPatterns=t.identifyCardPattern=void 0;const r=a(458),n=a(361);function s(e){const t=new Map;return e.forEach(e=>{t.set(e.rank,(t.get(e.rank)||0)+1)}),t}function i(e,t=5){if(e.length<t)return!1;if(e.some(e=>e>=r.Rank.ACE))return!1;const a=[...e].sort((e,t)=>e-t);for(let e=1;e<a.length;e++)if(a[e]-a[e-1]!==1)return!1;return!0}function l(e){return 1!==e.length?null:{type:r.CardType.SINGLE,cards:[...e],mainRank:e[0].rank,power:e[0].rank}}function o(e){if(2!==e.length)return null;const t=s(e),a=Array.from(t.keys());return 1===a.length&&2===t.get(a[0])?{type:r.CardType.PAIR,cards:[...e],mainRank:a[0],power:a[0]}:null}function d(e){if(3!==e.length)return null;const t=s(e),a=Array.from(t.keys());return 1===a.length&&3===t.get(a[0])?{type:r.CardType.TRIPLE,cards:[...e],mainRank:a[0],power:a[0]}:null}function c(e){if(4!==e.length)return null;const t=s(e),a=Array.from(t.keys());if(2===a.length){let n=null,s=null;for(const e of a)3===t.get(e)?n=e:1===t.get(e)&&(s=e);if(null!==n&&null!==s)return{type:r.CardType.TRIPLE_WITH_SINGLE,cards:[...e],mainRank:n,power:n}}return null}function u(e){if(5!==e.length)return null;const t=s(e),a=Array.from(t.keys());if(2===a.length){let n=null,s=null;for(const e of a)3===t.get(e)?n=e:2===t.get(e)&&(s=e);if(null!==n&&null!==s)return{type:r.CardType.TRIPLE_WITH_PAIR,cards:[...e],mainRank:n,power:n}}return null}function h(e){if(e.length<5)return null;const t=s(e),a=Array.from(t.keys());if(a.some(e=>1!==t.get(e)))return null;if(i(a)){const t=Math.min(...a);return{type:r.CardType.STRAIGHT,cards:(0,n.sortCards)(e),mainRank:t,power:t}}return null}function y(e){if(e.length<6||e.length%2!=0)return null;const t=s(e),a=Array.from(t.keys());if(a.some(e=>2!==t.get(e)))return null;if(i(a,3)){const t=Math.min(...a);return{type:r.CardType.DOUBLE_STRAIGHT,cards:(0,n.sortCards)(e),mainRank:t,power:t}}return null}function m(e){if(4!==e.length)return null;const t=s(e),a=Array.from(t.keys());return 1===a.length&&4===t.get(a[0])?{type:r.CardType.BOMB,cards:[...e],mainRank:a[0],power:a[0]+1e3}:null}function p(e){if(2!==e.length)return null;const t=e.map(e=>e.rank).sort((e,t)=>e-t);return t[0]===r.Rank.LITTLE_JOKER&&t[1]===r.Rank.BIG_JOKER?{type:r.CardType.JOKER_BOMB,cards:[...e],mainRank:r.Rank.BIG_JOKER,power:2e3}:null}function f(e){if(0===e.length)return{type:r.CardType.INVALID,cards:[],mainRank:r.Rank.THREE,power:0};const t=[p,m,l,o,d,c,u,h,y];for(const a of t){const t=a(e);if(t)return t}return{type:r.CardType.INVALID,cards:[...e],mainRank:r.Rank.THREE,power:0}}function g(e,t){return e.type!==t.type?e.type===r.CardType.JOKER_BOMB?1:t.type===r.CardType.JOKER_BOMB?-1:e.type===r.CardType.BOMB&&t.type!==r.CardType.BOMB?1:t.type===r.CardType.BOMB&&e.type!==r.CardType.BOMB?-1:0:e.power-t.power}t.identifyCardPattern=f,t.compareCardPatterns=g,t.canPlayCards=function(e,t){const a=f(e);return a.type!==r.CardType.INVALID&&(!t||g(a,t)>0)}},927:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameUI=void 0;const r=a(731),n=a(458),s=a(709),i=a(493),l=a(668);t.GameUI=class{constructor(){this.humanPlayerId="player_0",this.selectedCards=[],this.engine=new r.GameEngine,this.setupEventListeners(),this.setupGameEngineListeners()}setupEventListeners(){const e=document.getElementById("start-game-btn");e&&e.addEventListener("click",()=>this.startNewGame());const t=document.getElementById("call-landlord-btn");t&&t.addEventListener("click",()=>this.callLandlord());const a=document.getElementById("pass-landlord-btn");a&&a.addEventListener("click",()=>this.passLandlord());const r=document.getElementById("play-cards-btn");r&&r.addEventListener("click",()=>this.playSelectedCards());const n=document.getElementById("pass-btn");n&&n.addEventListener("click",()=>this.pass());const s=document.getElementById("reset-game-btn");s&&s.addEventListener("click",()=>this.resetGame());const i=document.getElementById("new-game-btn");i&&i.addEventListener("click",()=>this.startNewGame())}setupGameEngineListeners(){this.engine.addEventListener("gameStart",()=>{console.log("游戏开始"),this.hideSetupPanel(),this.showGameBoard()}),this.engine.addEventListener("stateChange",e=>{this.updateGameDisplay(e)}),this.engine.addEventListener("gameEnd",e=>{this.showGameResult(e)}),this.engine.addEventListener("error",e=>{this.showMessage(e.message,"error")})}startNewGame(){try{const e=document.getElementById("player1").value||"我",t=document.getElementById("player2").value||"电脑1",a=document.getElementById("player3").value||"电脑2",r=document.getElementById("ai-difficulty"),n=r?.value||"medium";this.engine.createNewGame("game_1",[e,t,a],n),this.engine.startGame(),this.hideResultPanel(),this.showMessage(`游戏开始！AI难度: ${this.getDifficultyText(n)}`,"success")}catch(e){this.showMessage(e.message,"error")}}getDifficultyText(e){switch(e){case l.AIDifficulty.EASY:return"简单";case l.AIDifficulty.MEDIUM:return"中等";case l.AIDifficulty.HARD:return"困难";default:return"中等"}}callLandlord(){try{this.engine.callLandlord(this.humanPlayerId)}catch(e){this.showMessage(e.message,"error")}}passLandlord(){try{this.engine.passLandlord(this.humanPlayerId)}catch(e){this.showMessage(e.message,"error")}}playSelectedCards(){if(0!==this.selectedCards.length)try{this.engine.playCards(this.humanPlayerId,this.selectedCards),this.selectedCards=[]}catch(e){this.showMessage(e.message,"error")}else this.showMessage("请选择要出的牌","error")}pass(){try{this.engine.pass(this.humanPlayerId)}catch(e){this.showMessage(e.message,"error")}}resetGame(){try{this.engine.resetGame(),this.engine.startGame(),this.selectedCards=[],this.showMessage("游戏已重置，重新开始！","success")}catch(e){this.showMessage(e.message,"error")}}updateGameDisplay(e){this.updateGameStatus(e),this.updatePlayerInfo(e),this.updatePlayerCards(e),this.updateLastPlayedCards(e),this.updateActionButtons(e)}updateGameStatus(e){const t=document.getElementById("game-state"),a=document.getElementById("current-player");if(t){let a="";switch(e.state){case s.GameState.WAITING:a="等待开始";break;case s.GameState.BIDDING:a="叫地主阶段";break;case s.GameState.PLAYING:a="游戏进行中";break;case s.GameState.FINISHED:a="游戏结束"}t.textContent=a}if(a){const t=e.players[e.currentPlayer];a.textContent=`当前玩家: ${t?t.name:"无"}`}}updatePlayerInfo(e){e.players.forEach((e,t)=>{const a=document.getElementById(`player-${t}`);if(a&&0!==t){const t=a.querySelector(".player-name"),r=a.querySelector(".card-count"),n=a.querySelector(".player-role");if(t){const a=e.type===i.PlayerType.AI?" (AI)":"";t.textContent=e.name+a}r&&(r.textContent=`${e.cards.length}张牌`),n&&(n.textContent=e.isLandlord?"地主":"")}});const t=document.getElementById("current-player-info");if(t){const a=e.players.find(e=>e.id===this.humanPlayerId),r=t.querySelector(".player-name"),n=t.querySelector(".player-role");r&&(r.textContent=a?a.name:"玩家"),n&&(n.textContent=a&&a.isLandlord?"地主":"")}}updatePlayerCards(e){const t=document.getElementById("player-cards");if(!t)return;const a=e.players.find(e=>e.id===this.humanPlayerId);a&&(t.innerHTML="",a.cards.forEach(a=>{const r=this.createCardElement(a),n=e.players[e.currentPlayer];n&&n.type===i.PlayerType.HUMAN?r.addEventListener("click",()=>this.toggleCardSelection(a,r)):(r.style.opacity="0.7",r.style.cursor="not-allowed"),t.appendChild(r)}))}createCardElement(e){const t=document.createElement("div");return t.className="card",t.textContent=e.display,e.suit===n.Suit.HEARTS||e.suit===n.Suit.DIAMONDS?t.classList.add("red"):e.suit===n.Suit.SPADES||e.suit===n.Suit.CLUBS?t.classList.add("black"):t.classList.add("joker"),t}toggleCardSelection(e,t){const a=this.selectedCards.findIndex(t=>t.display===e.display);a>=0?(this.selectedCards.splice(a,1),t.classList.remove("selected")):(this.selectedCards.push(e),t.classList.add("selected"))}updateLastPlayedCards(e){const t=document.getElementById("last-cards"),a=document.getElementById("last-player");if(t&&(e.lastPlayedPattern&&e.lastPlayedPattern.cards.length>0?(t.innerHTML="",e.lastPlayedPattern.cards.forEach(e=>{const a=this.createCardElement(e);a.style.transform="scale(0.8)",t.appendChild(a)})):t.innerHTML='<span class="no-cards">暂无</span>'),a)if(e.lastPlayerId){const t=e.players.find(t=>t.id===e.lastPlayerId);a.textContent=t?`${t.name} 出牌`:""}else a.textContent=""}updateActionButtons(e){const t=document.getElementById("call-landlord-btn"),a=document.getElementById("pass-landlord-btn"),r=document.getElementById("play-cards-btn"),n=document.getElementById("pass-btn"),l=document.getElementById("reset-game-btn");[t,a,r,n,l].forEach(e=>{e&&e.classList.add("hidden")});const o=e.players[e.currentPlayer];o&&o.type===i.PlayerType.HUMAN&&(e.state===s.GameState.BIDDING?(t&&t.classList.remove("hidden"),a&&a.classList.remove("hidden")):e.state===s.GameState.PLAYING&&(r&&r.classList.remove("hidden"),n&&n.classList.remove("hidden"))),e.state!==s.GameState.PLAYING&&e.state!==s.GameState.FINISHED||l&&l.classList.remove("hidden")}showGameResult(e){const t=document.getElementById("result-panel"),a=document.getElementById("winner-info"),r=document.getElementById("game-stats");if(t&&t.classList.remove("hidden"),a&&e.winner){const t=e.isLandlordWin?"地主获胜":"农民获胜";a.textContent=`${e.winner.name} 获胜！（${t}）`}if(r){const e=this.engine.getGameStats();r.innerHTML=`\n        <p>游戏时长: ${Math.floor(e.gameTime/1e3)}秒</p>\n        <p>总回合数: ${e.movesCount}</p>\n        <p>地主: ${e.landlord}</p>\n      `}}showMessage(e,t="success"){const a=document.getElementById("message-panel");a&&(a.textContent=e,a.className=`message-panel ${t} show`,setTimeout(()=>{a.classList.remove("show")},3e3))}hideSetupPanel(){const e=document.getElementById("setup-panel");e&&e.classList.add("hidden")}showGameBoard(){const e=document.getElementById("game-board");e&&e.classList.remove("hidden")}hideResultPanel(){const e=document.getElementById("result-panel");e&&e.classList.add("hidden")}destroy(){this.engine.destroy(),this.selectedCards=[]}}}},t={};!function a(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,a),s.exports}(156)})();